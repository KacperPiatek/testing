apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: flask-mysql
        ports:
        - containerPort: 3306
        resources:
          requests:
            cpu: 0.5
            memory: 256Mi
          limits:
            cpu: 1 
            memory: 750Mi   
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-initdb
        configMap:
          name: initdb
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306

# Have to test this ConfigMap initdb
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: initdb
# data:
#   # Check this option, and grant privitages :)
#   initdb.sql: |-
#     # You have to create user before granting him privitages and change IP
#     CREATE USER 'root'@'IP' IDENTIFIED BY 'password';
#     GRANT ALL ON flask.* TO 'root'@'IP';
#     FLUSH PRIVILEGES;
#     CREATE TABLE hello(id int AUTO_INCREMENT, title VARCHAR(50) NOT NULL,genre VARCHAR(30) NOT NULL,director VARCHAR(60) NOT NULL,release_year INT NOT NULL,PRIMARY KEY(id));
#     INSERT INTO hello(title,genre,director,release_year) VALUES ("Joker3", "psychological thriller", "Todd Phillips", 2019);
